[tool.poetry] # https://python-poetry.org/docs/pyproject/
name = "packagename"
version = "0.1.0"
description = "Python project boilerplate"
license = "MIT"
authors = ["Guillaume Gautier <guillaume.gga@gmail.com>"]
maintainers = ["Guillaume Gautier <guillaume.gga@gmail.com>"]
readme = "README.md" # path to README file (.md or .rst)
homepage = "https://github.com/guilgautier/template-python-project" # url
repository = "https://github.com/guilgautier/template-python-project" # url
documentation = "https://guilgautier.github.io/template-python-project" # url
keywords = [
    "python",
    "packaging",
    "python-package",
    "template",
] # ["optimization", "gradrient descent"] at most 5 keywords
classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Mathematics",
] # https://pypi.org/classifiers/

# https://python-poetry.org/docs/pyproject/#packages
packages = []

# https://python-poetry.org/docs/pyproject/#include-and-exclude
include = []
exclude = [] # ["src/data/**/*"]

[tool.poetry.dependencies] # https://python-poetry.org/docs/cli/#add
# These packages are mandatory and form the core of this packageâ€™s distribution.
python = ">=3.7.1,<3.10" # >=3.7.1 required by pandas, <3.10 required by scipy

# Install latest version of dependency package-name using
# poetry add package-name
# specific the version
numpy = "^1.21.4"
scipy = "^1.7.3"
matplotlib = "^3.5.0"
pandas = "^1.3.4"

pickle5 = { version = ">0.0", python = ">=3.5,<3.8" }

# A list of all of the optional dependencies, some of which are included in the
# below `extras`. They can be opted into by apps.
# poetry add package-name --optional

# Jupyter notebooks within VSCode
jupyter = { version = "^1.0.0", optional = true }

# Documentation
# configuration in docs/conf.py
Sphinx = { version = "^4.0.3", optional = true }
# Sphinx extensions https://www.sphinx-doc.org/en/master/usage/extensions/index.html
# Manage bibliography .bib files
# https://github.com/mcmtroffaes/sphinxcontrib-bibtex
sphinxcontrib-bibtex = { version = "^2.3.0", optional = true }
# Checks syntax of reStructuredText and code blocks nested within it https://github.com/myint/rstcheck
rstcheck = { version = "^3.3.1", optional = true }


[tool.poetry.extras]
# poetry install -E notebook -E docs

# Jupyter notebooks to be edited in VSCode
notebook = ["jupyter"]

# Documentation is generated with Sphinx
# https://www.sphinx-doc.org/en/master/index.html
# - locally with poetry run sphinx-build -b docs docs/_build/html
# - online either with
#     - ReadTheDocs see .readthedocs.yaml file
#     - GitHub pages see .github/workflows/docs.yml
docs = ["Sphinx", "sphinxcontrib-bibtex", "rstcheck"]

# Development dependencies
# poetry install installs project in editable mode + dev-dependencies
# poetry install --no-dev
[tool.poetry.dev-dependencies]
# poetry add package-name --dev
# see [tool.pytest.ini_options]
pytest = "^6.2.3"      # run the test suite
pytest-cov = "^2.11.1" # generate coverage report see --cov --cov-report flags

# https://pre-commit.com/
pre-commit = "^2.15.0"
# Python "uncompromising" code formatter https://github.com/psf/black
black = { extras = ["jupyter"], version = "^21.9b0" }
isort = "^5.9.3"
pydocstyle = "^6.1.1"
rstcheck = "^3.3.1"
pylint = "^2.11.1"

[build-system]
# poetry build
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
# poetry run pytest
# if your package contrains "-", say pkg-name, then --cov=pkg_name
minversion = "6.0"
addopts = "-ra -q -vv --cov=packagename --cov-report=term-missing --cov-report=xml"
testpaths = ["tests"]

# For other tools to be black compliant
# https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html
[tool.isort]
profile = "black"

[tool.pylint.messages_control]
disable = "C0330, C0326"

[tool.pylint.format]
max-line-length = "88"
